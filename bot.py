import logging
import os
import json
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden

BOT_TOKEN = '
CHANNEL_ID = 
ADMIN_USER_ID = 
DRUMKIT_FILE_PATH = 
MESSAGE_TEXT = """
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üî•

–í–æ—Ç —Ç–≤–æ–π –¥—Ä–∞–º–∫–∏—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∏—Ç–∞]

–ù–∞–¥–µ—é—Å—å, –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ!
–£–¥–∞—á–∏! üöÄ
"""
USER_DATA_FILE = 'user_data.json'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def load_user_data():
    if not os.path.exists(USER_DATA_FILE):
        return {}
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, dict):
                return {int(k): v for k, v in data.items()}
            else:
                 logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {USER_DATA_FILE}. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –Ω–æ–≤—ã–π.")
                 new_data = {}
                 if isinstance(data, list):
                     for user_id in data:
                         new_data[int(user_id)] = {"username": None, "first_name": "Unknown", "added_at": datetime.datetime.now().isoformat()}
                 save_user_data(new_data)
                 return new_data

    except (json.JSONDecodeError, FileNotFoundError, ValueError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {USER_DATA_FILE} –∏–ª–∏ –æ–Ω –ø—É—Å—Ç/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω ({e}). –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
        return {}

def save_user_data(user_data):
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            data_to_save = {str(k): v for k, v in user_data.items()}
            json.dump(data_to_save, f, indent=4, ensure_ascii=False)
    except IOError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª {USER_DATA_FILE}")

def add_or_update_user(user: Update.effective_user):
    user_data = load_user_data()
    user_id = user.id
    now = datetime.datetime.now().isoformat()

    user_info = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "last_interaction_at": now,
    }

    if user_id not in user_data:
        user_info["added_at"] = now
        user_data[user_id] = user_info
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
        save_user_data(user_data)
        return True
    else:
        updated = False
        if user_data[user_id].get('username') != user.username or \
           user_data[user_id].get('first_name') != user.first_name or \
           user_data[user_id].get('last_name') != user.last_name:
            updated = True
        user_data[user_id].update(user_info)
        if updated:
             logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username or user.first_name} (ID: {user_id}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
             logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        save_user_data(user_data)
        return False

async def is_user_subscribed(user_id: int, chat_id: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member_status = await context.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        logger.debug(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {member_status.status}")
        return member_status.status in ['member', 'administrator', 'creator']
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id} –Ω–∞ {chat_id}: {e}")
        if "member list is inaccessible" in str(e).lower():
             logger.error(f"–ù–ï –£–î–ê–õ–û–°–¨ –ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£: 'Member list is inaccessible'. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú –∫–∞–Ω–∞–ª–∞ '{chat_id}' —Å –ø—Ä–∞–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
        elif "user not found" in str(e).lower():
             logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             return False
        elif "chat not found" in str(e).lower():
             logger.error(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å CHANNEL_ID.")
             return False
        elif "bot is not a member" in str(e).lower():
             logger.error(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–º!).")
             return False
        return False
    except Forbidden as e:
        logger.error(f"–û—à–∏–±–∫–∞ Forbidden: –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ {chat_id}. –°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–æ–º! {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id} –Ω–∞ {chat_id}: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

    add_or_update_user(user)

    subscribed = await is_user_subscribed(user_id, CHANNEL_ID, context)

    if subscribed:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä–∞–º–∫–∏—Ç.")
        await send_drumkit(user_id, context)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥—Ä–∞–º–∫–∏—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_ID}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=reply_markup
        )

async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    await query.answer()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.first_name} (ID: {user_id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

    add_or_update_user(user)

    subscribed = await is_user_subscribed(user_id, CHANNEL_ID, context)

    if subscribed:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä–∞–º–∫–∏—Ç.")
        try:
            await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–π –¥—Ä–∞–º–∫–∏—Ç...")
        except BadRequest as e:
            if "message is not modified" not in str(e).lower():
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id} (—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞): {e}")
        await send_drumkit(user_id, context)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(
                "–•–º, —è –ø—Ä–æ–≤–µ—Ä–∏–ª, –Ω–æ –ø–æ–∫–∞ –Ω–µ –≤–∏–∂—É —Ç–µ–±—è —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.\n\n"
                f"–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {CHANNEL_ID} –∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
        except BadRequest as e:
             if "message is not modified" not in str(e).lower():
                  logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id} (–Ω–µ—É–¥–∞—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞): {e}")

async def send_drumkit(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not os.path.exists(DRUMKIT_FILE_PATH):
             logger.error(f"–§–∞–π–ª –¥—Ä–∞–º–∫–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {DRUMKIT_FILE_PATH}. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
             await context.bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º –¥—Ä–∞–º–∫–∏—Ç–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω!")
             if ADMIN_USER_ID:
                 try:
                     await context.bot.send_message(ADMIN_USER_ID, f"‚ÄºÔ∏è –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥—Ä–∞–º–∫–∏—Ç–∞ {DRUMKIT_FILE_PATH} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")
                 except Exception as admin_e:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞: {admin_e}")
             return

        with open(DRUMKIT_FILE_PATH, 'rb') as drumkit_file:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {DRUMKIT_FILE_PATH} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await context.bot.send_document(
                chat_id=user_id,
                document=drumkit_file,
                caption=MESSAGE_TEXT,
                parse_mode=ParseMode.HTML
            )
        logger.info(f"–î—Ä–∞–º–∫–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

    except Forbidden:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä–∞–º–∫–∏—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥—Ä–∞–º–∫–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        try:
            await context.bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        except Forbidden:
             logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ).")
        except Exception as send_err:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_err}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /broadcast –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} ({user.username or user.first_name}), –Ω–µ —è–≤–ª—è—é—â–∏–º—Å—è –∞–¥–º–∏–Ω–æ–º.")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–∫–æ—Ä–æ –Ω–æ–≤—ã–π –∫–∏—Ç!`\n"
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <a href='...'>—Å—Å—ã–ª–∫–∞</a>.",
            parse_mode=ParseMode.MARKDOWN
            )
        return

    message_text = update.message.text.split(' ', 1)[1]

    user_data = load_user_data()
    if not user_data:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    user_ids = list(user_data.keys())

    logger.info(f"–ê–¥–º–∏–Ω {user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                                     f"–¢–µ–∫—Å—Ç:\n{message_text[:100]}{'...' if len(message_text)>100 else ''}")

    success_count = 0
    fail_count = 0
    blocked_count = 0
    active_users_after_broadcast = user_data.copy()

    for user_id in user_ids:
        user_info = user_data.get(user_id, {})
        username = user_info.get('username', 'N/A')
        first_name = user_info.get('first_name', 'N/A')

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )
            success_count += 1
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username})")
        except Forbidden:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            fail_count += 1
            blocked_count += 1
            if user_id in active_users_after_broadcast:
                 del active_users_after_broadcast[user_id]
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")
            fail_count += 1

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –ù–µ—É–¥–∞—á–Ω–æ: {fail_count} (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count})")

    save_user_data(active_users_after_broadcast)
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–æ {blocked_count} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}\n"
        f"   (–ò–∑ –Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count} - –æ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã)"
    )


def main() -> None:
    if not os.path.exists(DRUMKIT_FILE_PATH):
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª –¥—Ä–∞–º–∫–∏—Ç–∞ '{DRUMKIT_FILE_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ.")

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(check_subscription_callback, pattern='^check_subscription$'))
    application.add_handler(CommandHandler("broadcast", broadcast))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
